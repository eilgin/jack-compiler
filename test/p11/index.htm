<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Microsoft FrontPage 4.0" name=GENERATOR></HEAD>
<BODY>
<p><font color="#004080"><i>The Elements of Computing&nbsp; Systems </i>/ <i>Nisan
&amp; Schocken</i></font><span style="color:#004080;
mso-fareast-language:EN-US"><i> </i>/ www.idc.ac.il/tecs</span><font color="#004080"><i>&nbsp;&nbsp;
</i> </font><font color="#004080" face="Arial"><strong><br>
<br>
<font size="5">Project 11: </font></strong><font size="5"><strong>Compiler II (Code Generation)</strong></font></font></p>
<p style="line-height: 100%; margin-top: 12; margin-bottom: 0"><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:HE;layout-grid-mode:line"><b>Objective:</b>  </span><span style="font-size:12.0pt;
mso-fareast-language:EN-US;layout-grid-mode:line">Extend the <i>syntax analyzer</i>
built in Project 10 into a full-scale Jack compiler. In particular, gradually replace the software modules that generate passive XML
code with software modules that generate executable VM code.</span></p>
<p style="line-height: 100%; margin-top: 12; margin-bottom: 0"><b><span style="font-size:12.0pt;mso-fareast-language:EN-US;layout-grid-mode:line">Resources:
</span></b><span style="font-size:12.0pt;mso-fareast-language:EN-US;layout-grid-mode:
line">The main tool needed is the programming language in which you will
implement the compiler. You will also need an executable copy of the Jack
operating system, as explained below. Finally, you will need the VM Emulator, to test the code generated by your compiler on a set of test programs
supplied </span><span style="font-size: 12.0pt; mso-fareast-language: EN-US; layout-grid-mode: line">in&nbsp;
</span><span style="mso-fareast-language:EN-US;layout-grid-mode: 
line"><a href="project%2011.zip">project 11.zip</a> and listed below. <span style="mso-fareast-language:EN-US;layout-grid-mode:
line">Start by creating a directory named </span><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-bidi-font-family: Times New Roman" class="code">projects/11</span>
<span style="mso-fareast-language:EN-US;layout-grid-mode: 
line">on your computer and extract this file
to it (</span><span style="mso-fareast-language:EN-US;layout-grid-mode:
line">preserving the directory structure embedded in the zip file</span>).</span></p>
<p style="line-height: 100%; margin-top: 12; margin-bottom: 0"><b><span style="font-size:12.0pt;
mso-fareast-language:EN-US;layout-grid-mode:line">Contract:</span></b><span style="font-size:12.0pt;mso-fareast-language:EN-US;layout-grid-mode:line">
Complete the Jack compiler implementation. </span><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:HE;layout-grid-mode:line">The output of the compiler should be
VM code designed to run on the virtual machine built in projects 7 and 8</span><span style="font-size:12.0pt;mso-fareast-language:EN-US;layout-grid-mode:line"><span style="font-family: Times New Roman; mso-fareast-font-family: Times New Roman; mso-ansi-language: EN-US; mso-bidi-language: HE">.&nbsp;
</span>Use your compiler to compile all the Jack programs listed below. Make sure
that each translated program executes according to its documentation.<o:p>
</o:p>
</span><span style="font-size:12.0pt;
mso-fareast-language:EN-US;layout-grid-mode:line">&nbsp;</span></p>
<p><font face="Arial" color="#004080" size="3"><strong>Stage I: Symbol Table</strong></font></p>
<p class="MsoBodyText" style="text-align: justify; line-height: 100%; margin-top: 12; margin-bottom: 0"><span style="font-size:12.0pt">We
suggest to start by building the compiler's symbol table module and using it to extend the syntax
analyzer built in Project 10. Presently, whenever an <i>identifier</i> is
encountered in the program, say </span><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">foo</span></font><span style="font-size:12.0pt">,
the syntax analyzer outputs the XML line “</span><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">&lt;identifier&gt;<span style="mso-bidi-font-size: 12.0pt">
foo &lt;/identifier&gt;</span></span></font><span style="font-size:12.0pt;
mso-fareast-language:EN-US;mso-bidi-language:AR-SA">”. Instead, have your
analyzer </span><span style="font-size:12.0pt">output the following information
as part of its XML output (using some format of your choice):</span><span style="font-size:12.0pt">&nbsp;<o:p>
</o:p>
</span></p>
<p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; mso-list: l74 level1 lfo95; mso-list-change: q Noam 20030810T1252; tab-stops: list 36.0pt right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-left: 36.0pt; margin-right: 2.8pt; margin-top: 12; margin-bottom: 0"><span style="font-size:
8.0pt;mso-bidi-font-size:12.0pt;font-family:Wingdings">q<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The identifier category (<font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">var</span></font>,
<font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">argument</span></font>,
<font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">static</span></font>,
<font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">field</span></font>,
<font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">class</span></font>,
<font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">subroutine</span></font>);</p>
<p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; mso-list: l74 level1 lfo95; mso-list-change: q Noam 20030810T1252; tab-stops: list 36.0pt right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-left: 36.0pt; margin-right: 2.8pt; margin-top: 12; margin-bottom: 0"><span style="font-size:8.0pt;mso-bidi-font-size:12.0pt;font-family:Wingdings">q<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Whether the identifier is presently being <i>defined</i> (e.g. the
identifier stands for a variable declared in a “<span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">var</font></span>”
statement) or <i>used</i> (e.g. the identifier stands for a variable in an
expression);</p>
<p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; mso-list: l74 level1 lfo95; mso-list-change: q Noam 20030810T1252; tab-stops: list 36.0pt right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-left: 36.0pt; margin-right: 2.8pt; margin-top: 12; margin-bottom: 0"><span style="font-size:8.0pt;mso-bidi-font-size:12.0pt;font-family:Wingdings">q<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the identifier represents a variable of one of the four kinds (<span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">var</span></font></span>,
<span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">argument</span></font></span>,
<span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">static</span></font></span>,
<span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">field</span></font></span>),
the running index assigned to the identifier by the symbol table.</p>
<p class="MsoBodyText" style="text-align: justify; line-height: 100%; margin-top: 12; margin-bottom: 0"><span style="font-size:12.0pt">You
may test your symbol table module and the above capability by running your (extended)
syntax analyzer on the test Jack programs supplied in Project 10.</span><span style="font-size: 12.0pt; font-family: Arial"><b>
</b></span><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:HE;mso-bidi-language:
HE">Once the output of your extended syntax analyzer will include the above
information, it means that you have developed a complete executable capability
to understand the semantics of Jack programs. At this stage you can make the
switch to a full-scale compiler, and start generating VM code instead of XML
output. This can be done by gradually morphing the code of the extended syntax
analyzer into a full compiler.</span></p>
<p><font face="Arial" color="#004080" size="3"><strong>Stage II: Code Generation</strong></font></p>
<p class="MsoBodyText" style="text-align: justify; margin-top: 0; margin-bottom: 0"><span style="font-size:12.0pt">We
don’t provide specific guidelines on how to develop the code generation
features of the compiler (except for the informal examples given in Chapter 11). Instead, we provide a set of six application programs designed to
unit-test
these features incrementally. We strongly suggest to test your compiler on these
programs in the given order. This way, you will be implicitly guided to build
the compiler’s code generation capabilities in stages, according to the
demands of each test program.</span></p>
<p class="MsoBodyText" style="text-align: justify; margin-top: 12; margin-bottom: 0"><b>The
Operating System:</b> The Jack OS -- the subject of Chapter 12 -- was written in
the Jack language. The source OS code was then translated (by an error-free Jack
compiler) into a set of VM files, collectively known as the <i>Jack OS</i>. Each
time we want to run an application program on the VM Emulator, we must load into
the emulator not only the application’s <span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.vm</font></span>
files, but also all the OS <span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.vm</font></span>
files. This way, when an application-level VM function calls some OS-level VM
function, they will find each other in the same environment.</p>
<p class="MsoBodyText" style="text-align: justify; margin-top: 12; margin-bottom: 0"><b>Testing
Method:</b> Normally, when you compile a program and run into some problems, you
conclude that the program is screwed up and proceed to debug it. In this project
the setting is exactly the opposite. All the test programs that we supply are
error-free. Therefore, if their compilation yields any errors, it’s the <i>compiler</i>
that you have to fix, not the test programs. For each test program, we recommend
going through the following routine:</p>
<p class="MsoBodyText" style="margin-top:6.0pt;margin-right:35.7pt;margin-bottom:
0cm;margin-left:35.7pt;margin-bottom:.0001pt;text-indent:-17.85pt;mso-list:
l63 level1 lfo94;mso-list-change:&quot;%1\:1\:0\:\.&quot; Noam 20030810T1252;tab-stops:
list 36.0pt right 468.0pt"><span style="font-size:12.0pt">1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-style: normal; font-variant: normal; font-weight: normal; font-size: 12.0pt; font-family: Times New Roman">Copy
all the </span><span style="font-size:12.0pt">supplied OS </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.vm</font></span><span style="font-size:12.0pt">
files from </span><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">tools/OS</span></font><span style="font-size:12.0pt">
into the program directory that contains the supplied </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.jack</font></span><span style="font-size:12.0pt">
 test file(s);<o:p>
</o:p>
</span></p>
<p class="MsoBodyText" style="margin-top:6.0pt;margin-right:35.7pt;margin-bottom:
0cm;margin-left:35.7pt;margin-bottom:.0001pt;text-indent:-17.85pt;mso-list:
l63 level1 lfo94;mso-list-change:&quot;%1\:2\:0\:\.&quot; Noam 20030810T1252;tab-stops:
list 36.0pt right 468.0pt"><span style="font-size:12.0pt">2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Compile the program directory using your compiler. This operation should
compile only the </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.jack</font></span><span style="font-size:12.0pt">
files in the directory, which is exactly what we want;<o:p>
</o:p>
</span></p>
<p class="MsoBodyText" style="margin-top:6.0pt;margin-right:35.7pt;margin-bottom:
0cm;margin-left:35.7pt;margin-bottom:.0001pt;text-indent:-17.85pt;mso-list:
l63 level1 lfo94;mso-list-change:&quot;%1\:3\:0\:\.&quot; Noam 20030810T1252;tab-stops:
list 36.0pt right 468.0pt"><span style="font-size:12.0pt">3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If there are any compilation errors, fix your compiler and return to step
2 (note that all the supplied test programs are error-free);<o:p>
</o:p>
</span></p>
<p class="MsoBodyText" style="margin-top:6.0pt;margin-right:35.7pt;margin-bottom:
0cm;margin-left:35.7pt;margin-bottom:.0001pt;text-indent:-17.85pt;mso-list:
l63 level1 lfo94;mso-list-change:&quot;%1\:4\:0\:\.&quot; Noam 20030810T1252;tab-stops:
list 36.0pt right 468.0pt"><span style="font-size:12.0pt">4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>At this point, the program directory should contain one </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.vm</font></span><span style="font-size:12.0pt">
file for each source </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.jack</font></span><span style="font-size:12.0pt">
 class file, as well as all the supplied OS </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">.vm</font></span><span style="font-size:12.0pt">
files. If this is not the case, fix your compiler and return to step 2;<o:p>
</o:p>
</span></p>
<p class="MsoBodyText" style="margin-top:6.0pt;margin-right:35.7pt;margin-bottom:
0cm;margin-left:35.7pt;margin-bottom:.0001pt;text-indent:-17.85pt;mso-list:
l63 level1 lfo94;mso-list-change:&quot;%1\:5\:0\:\.&quot; Noam 20030810T1252;tab-stops:
list 36.0pt right 468.0pt"><span style="font-size:12.0pt">5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-style: normal; font-variant: normal; font-weight: normal; font-size: 12.0pt; font-family: Times New Roman">Test
</span><span style="font-size:12.0pt"> the translated VM program by loading the
entire program directory into the VM Emulator and running it using the “<i>no animation</i>” mode. Each one of the six test
programs contains specific execution guidelines, as listed below;<o:p>
</o:p>
</span></p>
<p class="MsoBodyText" style="margin-top:6.0pt;margin-right:35.7pt;margin-bottom:
0cm;margin-left:35.7pt;margin-bottom:.0001pt;text-indent:-17.85pt;mso-list:
l63 level1 lfo94;mso-list-change:&quot;%1\:6\:0\:\.&quot; Noam 20030810T1252;tab-stops:
list 36.0pt right 468.0pt"><span style="font-size:12.0pt">6.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If the program behaves unexpectedly or some error message is displayed by
the VM Emulator, fix your compiler and return to step 2.<o:p>
</o:p>
</span></p>
<p><font face="Arial" color="#004080" size="3"><strong>Test Programs</strong></font></p>
<p>Each of the programs listed below is designed to gradually unit-test specific language handling
capabilities of your compiler.&nbsp;</p>

<table border="1" width="655" cellspacing="4" cellpadding="4" bordercolor="#EFCA85">
  <tr>
    <td width="136" valign="top" align="left" height="36" bgcolor="#F1DCA9">
      <p><b>Test Program</b>
    </td>
    <td width="934" valign="top" align="left" height="36" bgcolor="#F1DCA9">
      <p><b>Description</b>
    </td>
    <td width="368" valign="top" align="left" height="36" bgcolor="#F1DCA9">
      <p><b>Purpose</b>
    </td>
  </tr>
  <tr>
    <td width="136" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0">Seven:
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Seven/Main.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Main.jack</span></a>
    </td>
    <td width="934" valign="top" align="left" height="36">
      <p class="MsoNormal" style="direction: ltr; unicode-bidi: embed; word-spacing: 0; line-height: 100%; margin-right: 2.8pt; margin-top: 3; margin-bottom: 0" align="left">Computes
      the value of <font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt" class="code">(3*2)+1</span></font>
      and prints the result at the top left of the screen. To test if your
      compiler has translated the program correctly, run the translated code in
      the VM Emulator and make sure that it displays 7 correctly.
    </td>
    <td width="368" valign="top" align="left" height="36">
      <p class="MsoNormal" style="direction: ltr; unicode-bidi: embed; word-spacing: 0; line-height: 100%; margin-right: 2.8pt; margin-top: 3; margin-bottom: 0" align="left"><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:HE;mso-bidi-language:
HE">Tests how your compiler handles a simple program containing an arithmetic
      expression with integer constants (without variables), a<span style="mso-spacerun: yes">&nbsp;
      </span></span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">do</font></span><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:HE;mso-bidi-language:
HE"> statement, and a </span><span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">return</font></span><span style="font-size:12.0pt;
font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:HE;mso-bidi-language:HE">
      statement.</span>
    </td>
  </tr>
  <tr>
    <td width="136" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">Conversion to binary:</span>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="ConvertToBin/Main.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Main.jack</span></a>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0">&nbsp;
    </td>
    <td width="934" valign="top" align="left" height="36">
      <p class="MsoNormal" style="tab-stops: right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-right: 2.8pt; margin-top: 0; margin-bottom: 7" align="left">Unpacks
      a 16-bit number into its binary representation. The program takes the
      16-bit value stored in <span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">RAM[8000]</font></span>
      and stores its individual bits in <span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">RAM[8001..8016]
      </span></font></span>(each location will contain 0 or 1). Before the
      conversion starts, the program initializes <span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">RAM[8001..8016]</font></span>
      to <span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">-1</span></font></span>.
      To test if your compiler has translated the program correctly, load the
      translated code into the VM Emulator and go through the following routine:</p>
      <p class="MsoNormal" style="text-indent: -18.0pt; mso-list: l74 level1 lfo95; mso-list-change: q Noam 20030810T1252; tab-stops: list 27.0pt right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-left: 27.0pt; margin-right: 2.85pt; margin-top: 0; margin-bottom: 0" align="left"><span style="font-size:8.0pt;mso-bidi-font-size:12.0pt;font-family:Wingdings">q<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </span></span>Put (interactively) some value in <span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">RAM[8000]</font></span>;</p>
      <p class="MsoNormal" style="text-indent: -18.0pt; mso-list: l74 level1 lfo95; mso-list-change: q Noam 20030810T1252; tab-stops: list 27.0pt right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-left: 27.0pt; margin-right: 2.85pt; margin-top: 0; margin-bottom: 0" align="left"><span style="font-size:8.0pt;mso-bidi-font-size:12.0pt;font-family:Wingdings">q<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </span></span>Run the program for a few seconds, then stop its execution;</p>
      <p class="MsoNormal" style="text-indent: -18.0pt; mso-list: l74 level1 lfo95; mso-list-change: q Noam 20030810T1252; tab-stops: list 27.0pt right 468.0pt; direction: ltr; unicode-bidi: embed; line-height: 100%; margin-left: 27.0pt; margin-right: 2.85pt; margin-top: 0; margin-bottom: 0" align="left"><span style="font-size:8.0pt;mso-bidi-font-size:12.0pt;font-family:Wingdings">q<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </span></span>Check (interactively) that <span style="mso-bidi-font-size: 12.0pt" class="code"><font face="Courier New" size="2">RAM[8001..8016]</font></span> contain the correct results, and that none of them
      contains <span class="code"><font face="Courier New" size="2"><span style="mso-bidi-font-size: 12.0pt">-1</span></font></span>.</p>
    </td>
    <td width="368" valign="top" align="left" height="36">
      <p style="margin-top: 3" align="left">
      <span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:HE;mso-bidi-language:
HE">Tests how your compiler handles all the procedural elements of the Jack
      language, i.e. <i>expressions</i> (without arrays or method calls), <i>functions</i>,
      and all the language <i>statements</i>. The program does not test the
      handling of methods, constructors, arrays, strings, static variables and
      field variables.</span>
      </p>
    </td>
  </tr>
  <tr>
    <td width="136" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">Square</span> <span style="font-size: 12.0pt; font-family: Times New Roman; mso-fareast-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE">Dance</span><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">:</span>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Square/Main.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Main.jack</span></a>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Square/Square.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Square.jack</span></a><p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Square/SquareGame.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Square<br>
      Game.jack</span></a>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0">&nbsp;
    </td>
    <td width="934" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0" align="left">
      <strong><span style="font-weight:normal">A simple interactive “game”
      that enables </span></strong>moving a black square around the screen using
      the keyboard’s four arrow keys. While moving, the size of the square can
      be increased and decreased by pressing the “<span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Courier" class="code">z</span><span style="mso-ansi-font-size:12.0pt;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-hansi-font-family:&quot;Times New Roman&quot;" class="code">”</span> and
      “<span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Courier" class="code">x</span><span style="mso-ansi-font-size:12.0pt;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-hansi-font-family:&quot;Times New Roman&quot;" class="code">”</span> keys,
      respectively. To quit the game, press the “<span style="font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Courier" class="code">q</span><span style="mso-ansi-font-size:12.0pt;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-hansi-font-family:&quot;Times New Roman&quot;" class="code">”</span> key.
      To test if your compiler has translated the program correctly, run the
      translated code in the VM Emulator and make sure that it works according
      to the above description.
    </td>
    <td width="368" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0" align="left">
      <span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">Tests how your compiler handles the object oriented
      constructs of the Jack language: <i>constructors</i>, <i>methods</i>, <i>fields</i>
      and expressions that include <i>method calls</i>. The program does not
      test the handling of static variables.</span>
    </td>
  </tr>
  <tr>
    <td width="136" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0">Average<span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">:</span>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Average/Main.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Main.jack</span></a>
    </td>
    <td width="934" valign="top" align="left" height="36">
      <p class="MsoNormal" style="direction: ltr; unicode-bidi: embed; margin-right: 2.8pt" align="left">Computes
      the average of a user-supplied sequence of integers. To test if your
      compiler has translated the program correctly, run the translated code in
      the VM Emulator and follow the instructions displayed on the screen.
    </td>
    <td width="368" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0" align="left">
      T<span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">ests how your compiler handles <i>arrays</i> and <i>strings</i>.</span>
    </td>
  </tr>
  <tr>
    <td width="136" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><span style="font-size: 12.0pt; font-family: Times New Roman; mso-fareast-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE">Pong</span><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">:</span>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Pong/Main.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Main.jack</span></a>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Pong/Ball.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Ball.jack</span></a>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Pong/Bat.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Bat.jack</span></a><p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="Pong/PongGame.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Pong<br>
      Game.jack</span></a>
    </td>
    <td width="934" valign="top" align="left" height="36">
      <p class="MsoNormal" style="direction: ltr; unicode-bidi: embed; margin-right: 2.8pt" align="left"><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">A ball is moving randomly on the screen, bouncing off
      the screen “walls”. The user can move a small bat horizontally by
      pressing the keyboard’s left and right arrow keys. Each time the bat
      hits the ball, the user scores a point and the bat shrinks a little, to
      make the game harder. If the user misses and the ball hits the bottom
      horizontal line, the game is over. To test if your compiler has translated
      this program correctly, run the translated code in the VM Emulator and
      play the game (make sure to score some points, to test the part of the
      program that displays the score on the screen).</span>
    </td>
    <td width="368" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0">
      <span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">Provides a complete test of how your compiler handles <i>objects</i>,
      including the handling of <i>static variables</i>.</span>
    </td>
  </tr>
  <tr>
    <td width="136" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><span style="font-size: 12.0pt; font-family: Times New Roman; mso-fareast-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE">Complex
      Arrays:</span>
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0"><a href="ComplexArrays/Main.jack" target="_self"><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Courier New; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: HE; mso-bidi-language: HE" class="code">Main.jack</span></a>
    </td>
    <td width="934" valign="top" align="left" height="36">
      <p class="MsoNormal" style="direction: ltr; unicode-bidi: embed; margin-right: 2.8pt" align="left"><span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">Performs five complex calculations using arrays. For
      each such calculation, the program prints on the screen the expected
      result versus the actual result (as performed by the compiled program). To
      test if your compiler has translated the program correctly, run the
      translated code in the VM Emulator and make sure that the actual results
      are identical to the expected results.</span>
    </td>
    <td width="368" valign="top" align="left" height="36">
      <p style="line-height: 100%; margin-top: 2; margin-bottom: 0">
      <span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
HE;mso-bidi-language:HE">Tests how your compiler handles complex <i>array
      references</i> and <i>expressions</i>.</span>
    </td>
  </tr>
</table>

<p style="line-height: 100%; margin-top: 2; margin-bottom: 0">&nbsp;</p>

 </BODY></HTML>
